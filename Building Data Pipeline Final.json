{"paragraphs":[{"text":"#Kafka Producer \n\nimport json,time\nfrom kafka import KafkaProducer\n\nfor i in range(5000):\n    dict1 = {'court':random.choice(courtList)\n\n        }\n    producer = KafkaProducer(bootstrap_servers='sandbox-hdp.hortonworks.com:6667')\n    producer.send('test', json.dumps([dict1]).encode('utf-8'))\n    time.sleep(1)\n    producer.flush()","user":"anonymous","dateUpdated":"2019-06-19T22:07:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982010028_1714222123","id":"20190619-220650_495178806","dateCreated":"2019-06-19T22:06:50+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7912"},{"text":"#kafka Consumer \n\n%pyspark\nfrom kafka import KafkaConsumer\nconsumer = KafkaConsumer('project3', auto_offset_reset='earliest',\n                             bootstrap_servers='sandbox-hdp.hortonworks.com:6667', api_version=(0, 10), consumer_timeout_ms=1000)\n\nfor msg in consumer:\n    print msg","user":"anonymous","dateUpdated":"2019-06-19T22:07:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982049193_1309744252","id":"20190619-220729_526107660","dateCreated":"2019-06-19T22:07:29+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7913"},{"text":"#Voilation reasons \nfrom pyspark.sql.types import StructType , StringType , LongType , TimestampType,IntegerType,StructField\n\nschema = StructType([\nStructField(\"state_of_license\", StringType(), True),\nStructField(\"court\", StringType(), True),\nStructField(\"violation_dow\", StringType(),True),\nStructField(\"violation_year\", StringType(), True),\nStructField(\"age_at_violation\", StringType(), True),\nStructField(\"violation_month\", StringType(), True),\nStructField(\"source\", StringType(), True),\nStructField(\"violation_charged_code\", StringType(), True),\nStructField(\"gender\", StringType(), True),\nStructField(\"police_agency\", StringType(), True),\nStructField(\"violation_description\", StringType(), True)\n])\n\nfrom pyspark.sql.functions import from_json,col\ndf = spark \\\n  .readStream \\\n  .format(\"kafka\") \\\n  .option(\"kafka.bootstrap.servers\", \"sandbox-hdp.hortonworks.com:6667\") \\\n  .option(\"subscribe\", \"test\") \\\n  .load().select(from_json(col(\"value\").cast(\"string\"), schema).alias(\"parsed_value\")).select(col(\"parsed_value.*\"))\n  \ndf1=df.groupBy(\"violation_description\").count()\n\n  \nquery = df1 \\\n    .writeStream \\\n    .format(\"console\") \\\n    .trigger(processingTime='30 seconds') \\\n    .start()\nquery1=df.writeStream.format(\"csv\").option(\"checkpointLocation\", \"/tmp/checkpoint\").option(\"path\", \"/tmp/data\").trigger(processingTime='30 seconds').start()\nquery2=df1.writeStream.format(\"csv\").option(\"checkpointLocation\", \"/tmp/checkpoint_voilationcount\").option(\"path\", \"/tmp/data_voilationcount\").trigger(processingTime='30 seconds').outputMode(\"complete\").start()\n","user":"anonymous","dateUpdated":"2019-06-19T22:09:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982071512_-106813567","id":"20190619-220751_578082490","dateCreated":"2019-06-19T22:07:51+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7914"},{"text":"#Creating Static Dataset of Court Capacity\n\n\ncourtList=['ADAMS TOWN COURT',\n'ADAMS VILLAGE COURT',\n'ADDISON TOWN COURT',\n'AFTON TOWN COURT',\n'AIRMONT VILLAGE COURT',\n'AKRON VILLAGE COURT',\n'ALABAMA TOWN COURT',\n'ALBANY COUNTY COURT',\n'ALBANY POLICE COURT',\n'ALBANY TRAFFIC COURT',\n'ALBION TOWN COURT',\n'ALDEN TOWN COURT',\n'ALDEN VILLAGE COURT',\n'ALEXANDER TOWN COURT',\n'ALEXANDRIA BAY VILLAGE COURT',\n'ALEXANDRIA TOWN COURT',\n'ALFRED TOWN COURT',\n'ALFRED VILLAGE COURT',\n'ALLEGANY COUNTY COURT',\n'ALLEGANY TOWN COURT',\n'ALLEGANY VILLAGE COURT',\n'ALLEN TOWN COURT',\n'ALMA TOWN COURT',\n'ALMOND TOWN COURT',\n'ALTAMONT VILLAGE COURT',\n'ALTONA TOWN COURT',\n'AMBOY TOWN COURT',\n'AMENIA TOWN COURT',\n'AMHERST TOWN COURT',\n'AMITY TOWN COURT',\n'AMITYVILLE VILLAGE COURT',\n'AMSTERDAM CITY COURT',\n'AMSTERDAM TOWN COURT',\n'ANCRAM TOWN COURT',\n'ANDES TOWN COURT',\n'ANDOVER TOWN COURT',\n'ANDOVER VILLAGE COURT',\n'ANGELICA TOWN COURT',\n'ANGELICA VILLAGE COURT',\n'ANGOLA VILLAGE COURT',\n'ANNSVILLE TOWN COURT',\n'ANTWERP TOWN COURT',\n'ARCADE TOWN COURT',\n'ARCADE VILLAGE COURT',\n'ARCADIA TOWN COURT',\n'ARDSLEY VILLAGE COURT',\n'ARGYLE TOWN COURT',\n'ARIETTA TOWN COURT',\n'ARKWRIGHT TOWN COURT',\n'ASHAROKEN VILLAGE COURT',\n'ASHFORD TOWN COURT',\n'ASHLAND TOWN COURT',\n'ATHENS TOWN COURT',\n'ATLANTIC BEACH VILLAGE COURT',\n'ATTICA TOWN COURT',\n'ATTICA VILLAGE COURT',\n'AUBURN CITY COURT',\n'AUGUSTA TOWN COURT',\n'AURELIUS TOWN COURT',\n'AURORA TOWN COURT',\n'AUSABLE TOWN COURT',\n'AUSTERLITZ TOWN COURT',\n'AVA TOWN COURT',\n'AVOCA TOWN COURT',\n'AVON TOWN COURT',\n'AVON VILLAGE COURT',\n'BABYLON VILLAGE COURT',\n'BAINBRIDGE TOWN COURT',\n'BALDWINSVILLE VILLAGE COURT',\n'BALDWIN TOWN COURT',\n'BALLSTON SPA VILLAGE COURT',\n'BALLSTON TOWN COURT',\n'BANGOR TOWN COURT',\n'BARKER TOWN COURT',\n'BARKER VILLAGE COURT',\n'BARRE TOWN COURT',\n'BARRINGTON TOWN COURT',\n'BARTON TOWN COURT',\n'BATAVIA CITY COURT',\n'BATAVIA TOWN COURT',\n'BATH TOWN COURT',\n'BATH VILLAGE COURT',\n'BAXTER ESTATES VILLAGE COURT',\n'BAYVILLE VILLAGE COURT',\n'BEACON CITY COURT',\n'BEDFORD TOWN COURT',\n'BEEKMAN TOWN COURT',\n'BEEKMANTOWN TOWN COURT',\n'BELFAST TOWN COURT',\n'BELLEROSE VILLAGE COURT',\n'BELLE TERRE VILLAGE COURT',\n'BELLMONT TOWN COURT',\n'BELLPORT VILLAGE COURT',\n'BELMONT VILLAGE COURT',\n'BENNINGTON TOWN COURT',\n'BENSON TOWN COURT',\n'BENTON TOWN COURT',\n'BERGEN TOWN COURT',\n'BERKSHIRE TOWN COURT',\n'BERLIN TOWN COURT',\n'BERNE TOWN COURT',\n'BETHANY TOWN COURT',\n'BETHEL TOWN COURT',\n'BETHLEHEM TOWN COURT',\n'BIG FLATS TOWN COURT',\n'BINGHAMTON CITY COURT',\n'BINGHAMTON TOWN COURT',\n'BIRDSALL TOWN COURT',\n'BLACK BROOK TOWN COURT',\n'BLASDELL VILLAGE COURT',\n'BLEECKER TOWN COURT',\n'BLENHEIM TOWN COURT',\n'BLOOMINGBURG VILLAGE COURT',\n'BLOOMING GROVE TOWN COURT',\n'BOLIVAR TOWN COURT',\n'BOLIVAR VILLAGE COURT',\n'BOLTON TOWN COURT',\n'BOMBAY TOWN COURT',\n'BOONVILLE TOWN COURT',\n'BOONVILLE VILLAGE COURT',\n'BOSTON TOWN COURT',\n'BOVINA TOWN COURT',\n'BOYLSTON TOWN COURT',\n'BRADFORD TOWN COURT',\n'BRANDON TOWN COURT',\n'BRANT TOWN COURT',\n'BRASHER TOWN COURT',\n'BREWSTER VILLAGE COURT',\n'BRIARCLIFF MNR VILLAGE COURT',\n'BRIDGEWATER TOWN COURT',\n'BRIGHTON TOWN COURT',\n'BRIGHTWATERS VILLAGE COURT',\n'BRISTOL TOWN COURT',\n'BROADALBIN TOWN COURT',\n'BROADALBIN VILLAGE COURT',\n'BROCKPORT VILLAGE COURT',\n'BROCTON VILLAGE COURT',\n'BRONX TVB']\n\nl=[]\nfor i in range(len(courtList)):\n    l.append((courtList[i],random.randint(30,40)))\n\nrdd = sc.parallelize(l)\ncourt_capacity=spark.createDataFrame(rdd, ['court', 'capacity'])\ncourt_capacity.toPandas().to_csv('/tmp/court_capacity.csv')\ncourt_capacity=spark.read.csv('file:///tmp/court_capacity.csv')","user":"anonymous","dateUpdated":"2019-06-19T22:10:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982148321_765443578","id":"20190619-220908_1476171040","dateCreated":"2019-06-19T22:09:08+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7915"},{"text":"# Joining court capacity with real time court counts\npyspark --master local[*] --packages org.apache.spark:spark-sql-kafka-0-10_2.11:2.3.0 --driver-memory 8G\nimport random\nfrom pyspark.sql.types import StructType , StringType , LongType , TimestampType,IntegerType,StructField\nfrom pyspark.sql.functions import when\n\ncourt_capacity=spark.read.csv('file:///tmp/court_capacity.csv',header=True)\ncourt_capacity=court_capacity.select (['court','capacity'])\n\nschema = StructType([StructField(\"court\", StringType(), True)])\n\nfrom pyspark.sql.functions import from_json,col\ndf = spark \\\n  .readStream \\\n  .format(\"kafka\") \\\n  .option(\"kafka.bootstrap.servers\", \"sandbox-hdp.hortonworks.com:6667\") \\\n  .option(\"subscribe\", \"test\") \\\n  .load().select(from_json(col(\"value\").cast(\"string\"), schema).alias(\"parsed_value\")).select(col(\"parsed_value.*\"))\n  \ndf1=df.groupBy(\"court\").count()\n\ndf2=df1.join(court_capacity,\"court\")  \n\ndf3=df2.withColumn(\"message\", when(df2['capacity'] < df2['count'], 'Reached Capacity').otherwise('Not Reached Capacity'))\n\n\n  \nquery = df3 \\\n    .writeStream \\\n    .format(\"console\") \\\n    .outputMode(\"complete\") \\\n    .trigger(processingTime='30 seconds') \\\n    .start()\n\nquery1=df3.writeStream.format(\"csv\").option(\"checkpointLocation\", \"/tmp/join_checkpoint1\").option(\"path\", \"/tmp/project1\").trigger(processingTime='30 seconds').outputMode('complete').start()\n","user":"anonymous","dateUpdated":"2019-06-19T22:11:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982214587_1860517481","id":"20190619-221014_1344175711","dateCreated":"2019-06-19T22:10:14+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7916"},{"text":"#Combining Small files created by structured Streaming to create one file\nallfiles =  spark.read.option(\"header\",\"false\").csv(\"/tmp/project3/*.csv\")\nallfiles.coalesce(1).write.format(\"csv\").option(\"header\", \"false\").save(\"/tmp/allfiles.csv\")","user":"anonymous","dateUpdated":"2019-06-20T00:34:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560982337554_2026972627","id":"20190619-221217_2022072492","dateCreated":"2019-06-19T22:12:17+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7917"}],"name":"Building Data Pipeline Final","id":"2EGSRRGEU","noteParams":{},"noteForms":{},"angularObjects":{"jdbc:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}